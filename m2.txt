import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import mean_squared_error, mean_absolute_error, confusion_matrix, classification_report
from sklearn.metrics import accuracy_score, r2_score
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('emails.csv')
df
X = df.iloc[:, 1:-1]  # 1st column to 2999th column: the word counts
y = df.iloc[:, -1]    # Last column: the labels (spam or not-spam)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize 
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# K-Nearest Neighbors Classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_scaled, y_train)
y_pred_knn = knn.predict(X_test_scaled)

# Support Vector Machine Classifier
svm = SVC(kernel='linear')  # You can experiment with different kernels
svm.fit(X_train_scaled, y_train)
y_pred_svm = svm.predict(X_test_scaled)

 Metrics Calculation
def calculate_metrics(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    
    print(f"MSE: {mse}")
    print(f"RMSE: {rmse}")
    print(f"MAE: {mae}")
    print(f"RÂ²: {r2}")
    
    return mse, rmse, mae, r2
# Evaluate KNN
print("K-Nearest Neighbors Performance:")
mse_knn, rmse_knn, mae_knn, r2_knn = calculate_metrics(y_test, y_pred_knn)
print("Confusion Matrix (KNN):\n", confusion_matrix(y_test, y_pred_knn))
print("Classification Report (KNN):\n", classification_report(y_test, y_pred_knn))

# Evaluate SVM
print("\nSupport Vector Machine Performance:")
mse_svm, rmse_svm, mae_svm, r2_svm = calculate_metrics(y_test, y_pred_svm)
print("Confusion Matrix (SVM):\n", confusion_matrix(y_test, y_pred_svm))
print("Classification Report (SVM):\n", classification_report(y_test, y_pred_svm))
sns.heatmap(confusion_matrix(y_test, y_pred_svm),annot= True)
sns.heatmap(confusion_matrix(y_test, y_pred_knn),annot= True)




